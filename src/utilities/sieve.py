"""Module provides an implementation of the Sieve of Eratosthenes"""
import math

class Sieve():
    """Class that provides an implementation of Sieve of Eratosthenes
    """
    def __init__(self, n):
        """Class constructor that creates a new instance of the Sieve

        Args:
            n (int): A number under which all primes will be contained in the sieve
        """
        self.primes = self.primes_under_n(n)

    def primes_under_n(self, n):
        """Function that creates the sieve containing primes under n

        Args:
            n (int): Maximum value for a prime contained in the sieve

        Returns:
            list: Returns a list of all primes under n
        """
        prime_list = list(range(2, n))
        i = 2
        while i < math.sqrt(n):
            j = 2
            while i * j <= n:
                try:
                    prime_list.remove(i * j)
                except ValueError:
                    pass
                j += 1
            i += 1
        return prime_list

    def primality_test(self, number):
        """Provides a primality test where 'number' gets tested against primes 
        generated by the sieve

        Args:
            number (int): A int value being tested for primality

        Returns:
            bool: Boolean that is false if number is divisible by any prime in the sieve
        """
        if number == 1:
            return False

        for prime in self.primes:
            if number % prime == 0:
                return False
        return True
